Tool Selection:
	Beyond Selenium and Cucumber I would also consider using JUnit, as it allows for more organization of tests and easier ways 
	to run whole test suites.

Familiarity with the System:
	I think the ideal way to get comfortable with a system is simply to spend time using it as a user would. I would try first 
	using it as intended, making sure everything as intended, and then try doing non-intended user actions such as interrupting 
	critical process, such as hitting back in the browser while making a purchase, or creating an account, etc. Knowing where 
	the vulnerabilites in the system will then allow for better tests that can cover such cases, as well as letting the development 
	team know what needs to be addressed.

Critical Tests:
	The tests I believe should be the highest priority would be anything involving payments and purchases. These functions should
	be dealt with first as any issues with payments would be critical to the running of a storefront and can lead to the most problems
	with the product such as customers not being able to purchase items, or orders not being processed correctly, etc. will have direct
	financial consequences.

Expanding Coverage:
	As mentioned in prior, the best way to expand coverage is knowing where vulnerabilites in the system are. Tests would first start with 
	user intended actions, 'happy path' tests. Next woiuld be tests to cover regular invalid interactions such as empty/invalid credentials,
	empty cart, bad logins, etc. Then it will come to trying to do things outside of what is expected os users to typically do, primarily
	interupting critical processes and seeing how the system implements resolutions to that. On top of those, we would also need to test on a
	variety of enviornments: browsers, OS's and devices (Desktop computers vs smartphones) to ensure a consistent experience across all
	such supported enviornments.